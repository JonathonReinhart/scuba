#!/usr/bin/env python2

# SCUBA - Simple Container-Utilizing Build Architecture
# (C) 2015 Jonathon Reinhart
# https://github.com/JonathonReinhart/scuba

import os, os.path
import sys
import yaml
import subprocess
import shlex
import argparse

__version__ = '1.1.2'

SCUBA_YML = '.scuba.yml'
BUILD_DIR = '/build'

def appmsg(fmt, *args):
    print 'scuba: ' + fmt.format(*args)

# http://stackoverflow.com/a/9577670
class Loader(yaml.Loader):
    def __init__(self, stream):
        self._root = os.path.split(stream.name)[0]
        super(Loader, self).__init__(stream)

    def from_yaml(self, node):
        '''
        Implementes a !from_yaml constructor with the following syntax:
            !from_yaml filename key

        Arguments:
            filename:   Filename of external YAML document from which to load,
                        relative to the current YAML file.
            key:        Key from external YAML document to return,
                        using a dot-separated syntax for nested keys.

        Examples:
            !from_yaml external.yml pop
            !from_yaml external.yml foo.bar.pop
            !from_yaml "another file.yml" "foo bar.snap crackle.pop"
        '''
        # Load the content from the node, as a scalar
        content = self.construct_scalar(node)

        # Split on unquoted spaces
        parts = shlex.split(content)
        if len(parts) != 2:
            raise yaml.YAMLError('Two arguments expected to !from_yaml')
        filename, key = parts

        # path is relative to the current YAML document
        path = os.path.join(self._root, filename)

        # Load the other YAML document
        with open(path, 'r') as f:
            doc = yaml.load(f, self.__class__)

        # Retrieve the key
        try:
            cur = doc
            for k in key.split('.'):
                cur = cur[k]
        except KeyError:
            raise yaml.YAMLError('Key "{0}" not found in {1}'.format(key, filename))
        return cur



Loader.add_constructor('!from_yaml', Loader.from_yaml)


def load_config():
    try:
        with open(SCUBA_YML) as f:
            config = yaml.load(f, Loader)
    except IOError as e:
        if e.errno == 2:
            # Pretty message for the most common error
            appmsg('No {0} found.', SCUBA_YML)
        else:
            appmsg('Error opening {0}: {1}', SCUBA_YML, e)
        sys.exit(2)

    required_nodes = ('image',)
    optional_nodes = ('aliases',)

    # Check for missing required nodes
    missing = [n for n in required_nodes if not n in config]
    if missing:
        appmsg('{0}: Required node{1} missing: {2}', SCUBA_YML,
                's' if len(missing) > 1 else '', ', '.join(missing))
        sys.exit(2)

    # Check for unrecognized nodes
    extra = [n for n in config if not n in required_nodes + optional_nodes]
    if extra:
        appmsg('{0}: Unrecognized node{1}: {2}', SCUBA_YML,
                's' if len(extra) > 1 else '', ', '.join(extra))
        sys.exit(2)

    return config

def process_command(config, command):
    aliases = config.get('aliases', {})

    if command:
        rep = aliases.get(command[0])
        if rep:
            command.pop(0)
            command = shlex.split(rep) + command

    return command


def make_vol_opt(hostdir, contdir, options=None):
    '''Generate a docker volume option'''
    vol = '--volume={0}:{1}'.format(hostdir, contdir)
    if options != None:
        if isinstance(options, basestring):
            options = (options,)
        vol += ':' + ','.join(options)
    return vol

def parse_args():
    ap = argparse.ArgumentParser(description='Simple Container-Utilizing Build Apparatus')
    ap.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
    ap.add_argument('command', nargs=argparse.REMAINDER)
    args = ap.parse_args()

    return args

def main():
    args = parse_args()

    config = load_config()

    run_args = ['docker', 'run',
        # interactive: keep STDIN open
        '-i',

        # allocate TTY
        '-t',

        # remove container after exit
        '--rm',

        # Mount build directory...
        # NOTE: This tells Docker to re-label the directory for compatibility
        # with SELinux. See `man docker-run` for more information.
        make_vol_opt(os.getcwd(), BUILD_DIR, 'z'),

        # ...and set the working dir there
        '-w', BUILD_DIR,
    ]

    # Run as the current user:group
    # Only pass the --user option if we're running docker locally/natively.
    # This is to work around a permissions issue in the container when running
    # on OSX using boot2docker.
    if not 'DOCKER_HOST' in os.environ:
        run_args.append('--user={0}:{1}'.format(os.getuid(), os.getgid()))

    # Docker image
    run_args.append(config['image'])

    run_args += process_command(config, args.command)

    #from pprint import pprint; pprint(run_args)
    #return 42

    return subprocess.call(run_args)

if __name__ == '__main__':
    main()
